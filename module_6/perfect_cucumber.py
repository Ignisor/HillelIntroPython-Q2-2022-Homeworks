print(
    '–ü—Ä–∏–≤—ñ—Ç! –ú–µ–Ω—ñ –¥—É–∂–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω Cucumber –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑, –≤–≤–µ–¥–∏ –º–µ–Ω—ñ Cucumber –±—É–¥—å –ª–∞—Å–∫–∞!\n'
    '–ê–ª–µ –±—É–¥—å —É–≤–∞–∂–Ω–∏–º, –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –≤–∞–∂–ª–∏–≤–æ —â–æ–± Cucumber –±—É–≤ –≥–∞—Ä–Ω–∏–π —Ç–∞ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫!'
)


def validations(cucumber):
    assert (
        ' ' not in cucumber
    ), '–©–æ—Å—å —è –Ω–µ –ø–∞–º º—è—Ç–∞—é —â–æ–± —É Cucumber –±—É–ª–∏ –ø—Ä–æ–±—ñ–ª–∏. –ë—É–¥—É –≤–≤–∞–∂–∞—Ç–∏ —â–æ —Ü–µ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å...'

    assert 'cucumber' in cucumber.lower(), '–¢—É—Ç –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞ Cucumber!'

    assert cucumber.startswith('C'), (
        '–û –Ω—ñ! –ù—É —Ö—Ç–æ –∂ —Ç–∞–∫ —Ä–æ–±–∏—Ç—å!'
        ' –¢–≤—ñ–π Cucumber –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –º–∞–ª–µ–Ω—å–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –≤–∏–ø—Ä–∞–≤–ª—è–π —à–≤–∏–¥–µ–Ω—å–∫–æ'
    )

    assert cucumber[1:].islower(), '–©–æ –∑–∞ –∫—Ä–∏–≤–∏–π Cucumber? –ê –Ω—É –≤–∏—Ä—ñ–≤–Ω—é–π!'

    assert cucumber.lower() == 'cucumber', '–¢—É—Ç —â–æ—Å—å –∑–∞–π–≤–µ - –ø—Ä–∏–±–µ—Ä–∏'


while True:
    cucumber_input = input('–î–∞–≤–∞–π, —è –≤ —Ç–µ–±–µ –≤—ñ—Ä—é: ')

    try:
        validations(cucumber_input)
    except AssertionError as error:
        print(error, 'üò°')
    else:
        print('–í—ñ–¥–º—ñ–Ω–Ω–æ! –î—É–∂–µ –¥—è–∫—É—é! –¢–∏, –±—É–∫–≤–∞–ª—å–Ω–æ, –≤—Ä—è—Ç—É–≤–∞–≤ –≤—Å–µ—Å–≤—ñ—Ç üòä')
        break
